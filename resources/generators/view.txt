(ns views.__table
  (:require [coast.components :as comp]))
  (:refer-clojure :exclude [new])

(defn table-row [m]
  (let [{:keys [__columns]} m
        edit (format "/__table/%s/edit" id])
        delete (format "/__table/%s" id])
        show (format "/__table/%s" id])]
    [:tr
      __td-columns
      [:td
        [:a {:href edit} "Edit"]]
      [:td
        [:a {:href delete} "Delete"]]
      [:td
        [:a {:href show} "Show"]]]))

(defn index [request]
  (let [{:keys [__table]} request]
    [:div
      [:table
        [:thead
          [:tr
            __th-columns]]
        [:tbody
          (for [m __table]
            (table-row m))]]
      [:div
        [:a {:href "/__table/new"} "New __singular"]]]))

(defn show [request]
  (let [{:keys [__singular]} request
        {:keys [__columns]} __singular
        delete-href (format "/__table/%s?_method=delete" id)]
    [:div
      __div-columns
      [:div
       [:a {:href delete-href} "Delete"]]
      [:div
        [:a {:href "/__table"} "Back"]]]))

(defn new [request]
  (let [{:keys [__singular]} request
        {:keys [__columns]} __singular]
    [:div
     (comp/form-for [:post "/__table"]
       __form-columns
       [:input {:type "submit" :value "Create"}])]))

(defn edit [request]
  (let [{:keys [__singular]} request
        {:keys [__columns]} __singular]
    [:div
     (comp/form-for [:put "/__table/:id" __singular]
       __form-columns
       [:input {:type "submit" :value "Save"}])]))
